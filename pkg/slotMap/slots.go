// Code generated by ULLD dev cli. DO NOT EDIT.

package slot_map

import (
	"fmt"

	"github.com/Uh-little-less-dum/build/pkg/types"
)

type SlotKey string

const (
   Snippets SlotKey = "snippets"
    Math SlotKey = "math"
    Editor SlotKey = "editor"
    UI SlotKey = "UI"
    Bibliography SlotKey = "bibliography"
    TaskManager SlotKey = "taskManager"
    Pdf SlotKey = "pdf"
    Navigation SlotKey = "navigation"
    Dashboard SlotKey = "dashboard"
    Form SlotKey = "form"
    CommandPalette SlotKey = "commandPalette"
    
    NoSlotApplied SlotKey = ""
)


func GetSlots() []Slot {
    return []Slot{
        {
    Id: Snippets,
	SubSlots: []string{
        "SnippetListPage",
        "AddSnippetPage",
        "SnippetList",
        "SnippetFilter",
        }},
        {
    Id: Math,
	SubSlots: []string{
        "EquationDetailsModalPage",
        "EquationsPage",
        "EquationDetailsPage",
        "AddEquationPage",
        }},
        {
    Id: Editor,
	SubSlots: []string{
        "EditorModalPage",
        "MdxEditorPage",
        "LatexEditorPage",
        "EditorPage",
        }},
        {
    Id: UI,
	SubSlots: []string{
        "ComponentDocsListPage",
        "Pagination",
        "logo",
        "loadingIndicator",
        "confirmationModal",
        "ComponentDocumentationPageWrapper",
        "AutoSettingsTable",
        "AutoSettingFormModal",
        "SearchResultsPage",
        "BookmarksPage",
        "NotesSearchResultsList",
        "NoteSummarySearchResult",
        "DictionaryLetterList",
        "DictionaryPageItem",
        "NoteTypeSecondaryFilter",
        "NoteTypeSearchResultList",
        "MdxNoteContainer",
        }},
        {
    Id: Bibliography,
	SubSlots: []string{
        "BibliographyPage",
        "BibEntryDetails",
        }},
        {
    Id: TaskManager,
	SubSlots: []string{
        "TaskManagerPage",
        "TaskDetails",
        "AddTask",
        "AddTaskList",
        "TaskListSearchResultList",
        "TaskListSearchResult",
        }},
        {
    Id: Pdf,
	SubSlots: []string{
        "FullPdf",
        }},
        {
    Id: Navigation,
	SubSlots: []string{
        "secondary",
        "NoteDetailSheet",
        "navbar",
        "MultiPageSidebar",
        "FullScreenNavigationMenu",
        "Footer",
        }},
        {
    Id: Dashboard,
	SubSlots: []string{
        "LandingPage",
        }},
        {
    Id: Form,
	SubSlots: []string{
        "SettingsPageContainer",
        }},
        {
    Id: CommandPalette,
	SubSlots: []string{
        "commandPalette",
        }},
        
        {Id: NoSlotApplied, SubSlots: []string{}},
    }
}

func SlotIdIterator() []SlotKey {
    return []SlotKey{
        Snippets,
        Math,
        Editor,
        UI,
        Bibliography,
        TaskManager,
        Pdf,
        Navigation,
        Dashboard,
        Form,
        CommandPalette,
        
        NoSlotApplied,
    }
}

func getSlotMapOfDefaultType[T interface{}](defaultVal T) map[string]T {
    var sm = make(map[string]T)
    s := GetSlots()
    for _, k := range s {
        for _, ss := range k.SubSlots {
          sm[fmt.Sprintf("%s/%s", k.Id, ss)] = defaultVal
        }
    }
    return sm
}

// Returns a boolean map in the form of "parentSlot.subSlot = Boolean(slotExists)"
func GetNewSlotBoolMap(defaultVal ...interface{}) map[string]bool {
    return getSlotMapOfDefaultType(false)
}

func GetNewSlotMapCountMap(plugins []types.UlldPlugin) *map[string]int {
    m := getSlotMapOfDefaultType(0)
    for _, p := range plugins {
        for _, c := range p.Components() {
            slotKey := (*c).SlotKey()
            if slotKey != "" {
                m[slotKey] = m[slotKey] + 1
            }
        }
    }
    return &m
}
